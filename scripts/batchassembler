#!/usr/bin/env python

# Batch assembler 

import os
import os.path
import sys
import subprocess
import argparse

def collectFilesOfType(root, extension):
    print "-- collecting files with extension: %s" % (extension)
    list = []
    for item in os.listdir(root):
        if os.path.isfile(os.path.join(root, item)):
            if item.endswith(extension):
                list.append(item)
                print ".... %s" % (item)
    return list

# execute shell command, print stdout and return proc object for e.g. result checking
# note: execution is done blockingly (proc.wait())
def runShellCmd(cmdstr):
    proc = subprocess.Popen(cmdstr, shell=True, stdout=subprocess.PIPE)
    for line in proc.stdout:
        print line
    proc.wait()
    return proc


parser = argparse.ArgumentParser(description='Akikos automated batch assembler for Amiga coders. Using vasm to assemble all .s files into .o for further linking.')
parser.add_argument('-cd', '--chdir', type=str, default="./", help='batch build in directory, default is ./ ')
args = parser.parse_args()
# set current build directory
srcdir = args.chdir
print "-- setting working in directory: ", srcdir

# change current working directory to srcdir
os.chdir(srcdir)

# collect all asm and c files
asmfiles = collectFilesOfType("./", ".s")
if len(asmfiles) == 0:
    print "Nothing to build. Ejecting."
    exit(0)

# process asm files
objs = []
for f in asmfiles:
    #vasm - devpac - Fvobj $f - o "$filename.o"
    base = os.path.splitext(f)[0]
    cmdstr = "vasm -devpac -m68020 -Fvobj %s -o %s.o" % (f, base)
    objs.append("%s.o" % (base))
    print "assembling: ", cmdstr
    proc = runShellCmd(cmdstr)
    if proc.returncode != 0:
        print "Error: assembly failed, ret code = ", proc.returncode
        exit(1)

